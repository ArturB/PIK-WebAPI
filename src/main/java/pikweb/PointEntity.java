package pikweb;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;
import java.util.Date;

/**
 * Persistence class generated by Hibernate. A point on a map.
 */
@Entity
@Table(name = "point", schema = "pik", catalog = "postgres")
public class PointEntity {
    /**
     * Point primary key.
     */
    private Integer id;

    /**
     * Geographic coordinates - point latitude.
     */
    private double latitude;

    /**
     * Geographic coordinates - point longitude.
     */
    private double longitude;

    /**
     * Point name, must be unique.
     */
    private String name;

    /**
     * ID of the user that is a point owner.
     */
    private int owner;


    /**
     * Point owner - Java object. Relationship (foreign key) is lazily resolved by default.
     * Don't serialized, because relationships are lazily instantiated by default.
     */
    @JsonIgnore
    private transient UserEntity userByOwner;

    /**
     * Get point primary key.
     * @return point primary key.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false)
    public Integer getId() {
        return id;
    }

    /**
     * Set point primary key.
     * @param id New primary key.
     */
    public void setId(Integer id) {
        this.id = id;
    }

    /**
     * Get point geographical coordinates - return latitude.
     * @return point geographical coordinates - return latitude.
     */
    @Basic
    @Column(name = "latitude", nullable = false, precision = 0)
    public double getLatitude() {
        return latitude;
    }

    /**
     * Set point latitute.
     * @param latitude Latitude to set (in degrees).
     */
    public void setLatitude(double latitude) {
        this.latitude = latitude;
    }

    /**
     * Get point geographical coordinates - return longitude.
     * @return point geographical coordinates - return longitude.
     */
    @Basic
    @Column(name = "longitude", nullable = false, precision = 0)
    public double getLongitude() {
        return longitude;
    }

    /**
     * Set point longitude.
     * @param longitude Longitude to set (in degrees).
     */
    public void setLongitude(double longitude) {
        this.longitude = longitude;
    }

    /**
     * Get point name.
     * @return Point name.
     */
    @Basic
    @Column(name = "name", nullable = true, length = -1)
    public String getName() {
        return name;
    }

    /**
     * Set the point name. Must be unique.
     * @param name name to set.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Compare to points by equality.
     * @param o Point to compare with.
     * @return True if all fields are of the same value, false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        PointEntity that = (PointEntity) o;

        if (id != that.id) return false;
        if (Double.compare(that.latitude, latitude) != 0) return false;
        if (Double.compare(that.longitude, longitude) != 0) return false;
        if (name != null ? !name.equals(that.name) : that.name != null) return false;

        return true;
    }

    /**
     * Generate hash from the point.
     * @return Hash of the point.
     */
    @Override
    public int hashCode() {
        int result;
        long temp;
        result = id;
        temp = Double.doubleToLongBits(latitude);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        temp = Double.doubleToLongBits(longitude);
        result = 31 * result + (int) (temp ^ (temp >>> 32));
        result = 31 * result + (name != null ? name.hashCode() : 0);
        return result;
    }

    /**
     * Get owner of the point.
     * @return User - owner of the point.
     */
    @ManyToOne
    @JoinColumn(name = "owner", referencedColumnName = "id", nullable = false)
    public UserEntity getUserByOwner() {
        return userByOwner;
    }

    /**
     * Set owner of the point.
     * @param userByOwner new owner to set.
     */
    public void setUserByOwner(UserEntity userByOwner) {
        this.userByOwner = userByOwner;
    }
}
