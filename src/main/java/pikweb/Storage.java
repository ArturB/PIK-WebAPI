package pikweb;

import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.Query;

import java.util.ArrayList;
import java.util.List;

/**
 * DAO object. Allows to work with the database.
 */
public class Storage {
    private static final SessionFactory ourSessionFactory;

    //create static session on start
    static {
        try {
            Configuration configuration = new Configuration();
            configuration.configure();

            ourSessionFactory = configuration.buildSessionFactory();
        } catch (Throwable ex) {
            throw new ExceptionInInitializerError(ex);
        }
    }

    /**
     * Get a database session.
     * @return Current database connection session.
     * @throws HibernateException
     */
    public static Session getSession() throws HibernateException {
        return ourSessionFactory.openSession();
    }

    /**
     * Add new user to database.
     * @param user User to add. Primary key is autogenerated may be set to null.
     * @throws Exception
     */
    public void addUser(UserEntity user) throws Exception {
        final Session session = getSession();
        session.beginTransaction();
        try {
            session.save(user);
            session.getTransaction().commit();
        } catch(Exception e) {
            session.getTransaction().rollback();
            throw e;
        } finally {
            session.close();
        }
    }


    /**
     * Check user credentials.
     * @param user User to check.
     * @return True if user credentials are valid, false otherwise.
     */
    public Boolean checkCredentials(UserEntity user) {
        final Session session = getSession();
        try {
            final Query byName = session.createQuery("from " + "UserEntity" + " where login = :login and passhash = :passhash");
            byName.setParameter("login", user.getLogin());
            byName.setParameter("passhash", user.getPasshash());
            List<UserEntity> ul = byName.list();
            if(ul.isEmpty()) {
                return false;
            }
            else {
                return true;
            }
        } finally {
            session.close();
        }
    }

    /**
     * Delete user from database. Deletes also all points that this user was owner of.
     * @param user User to delete.
     * @throws InvalidLoginException thrown if user credentials are invalid
     */
    public void deleteUser(UserEntity user) throws InvalidLoginException {
        final Session session = getSession();
        session.beginTransaction();
        try {
            final Query byName = session.createQuery("from " + "UserEntity" + " where login = :login and passhash = :passhash");
            byName.setParameter("login", user.getLogin());
            byName.setParameter("passhash", user.getPasshash());
            List<UserEntity> ul = byName.list();
            if(ul.isEmpty()) {
                throw new InvalidLoginException();
            }
            else {
                ul.forEach( u -> {
                            session.delete(u);
                        }
                );
                session.getTransaction().commit();
            }
        } finally {
            session.close();
        }
    }




    /**
     * Get list of all points in the database.
     * @return List of all points in the database.
     * @throws Exception
     */
    public List<PointEntity> getAllPoints() throws Exception {
        final Session session = getSession();
        try {
            final Query query = session.createQuery("from " + "PointEntity");
            List<PointEntity> ls = query.list();
            return ls;
        } finally {
            session.close();
        }
    }

    /**
     * Get list of points belonging to given user in the database.
     * @param username User whose points method gets.
     * @return List of points belonging to given user in the database.
     * @throws Exception
     */
    public List<PointEntity> getUserPoints(String username) throws Exception {
        final Session session = getSession();
        try {
            final Query query = session.createQuery("from PointEntity ");
            List<PointEntity> ls = query.list();
            List<PointEntity> result = new ArrayList<PointEntity>();
            ls.forEach( u-> {
                if (u.getUserByOwner().getLogin().equals(username))
                    result.add(u);
            });
            return result;
        } finally {
            session.close();
        }
    }



    /**
     * Get list of all users in the database.
     * @return List of all users in the database.
     * @throws Exception
     */
    public List<UserEntity> getAllUsers() throws Exception {
        final Session session = getSession();
        try {
            final Query query = session.createQuery("from " + "UserEntity");
            List<UserEntity> ls = query.list();
            return ls;
        } finally {
            session.close();
        }
    }

    /**
     * Get whole database from server - all points and all users.
     * @return Whole databse data - all points and all users.
     * @throws Exception
     */
    public PIKdata getAllData() throws Exception {
        return new PIKdata(getAllUsers(), getAllPoints());
    }


    /**
     * Add new point to database.
     * @param point Point to add. Primary key is autogenerated may be set to null.
     * @throws Exception
     */
    public void addPoint(PointEntity point) throws Exception {
        final Session session = getSession();
        session.beginTransaction();
        try {
            String login = point.getUserByOwner().getLogin();
            UserEntity userEntity = getUserByLogin(login);
            point.setUserByOwner(userEntity);
            session.save(point);
            session.getTransaction().commit();
        } catch(Exception e) {
            session.getTransaction().rollback();
            throw e;
        } finally {
            session.close();
        }
    }

    /**
     * Delete user from database. Deletes also all points that this user was owner of.
     * @param point Point to delete.
     * @throws InvalidLoginException thrown if user credentials are invalid
     */
    public void deletePoint(PointEntity point, UserEntity user) throws InvalidIdException {
        final Session session = getSession();
        session.beginTransaction();
        try {
            String login = user.getLogin();
            PointEntity pointFound = session.get(PointEntity.class, point.getId());

            //final Query byId = session.createQuery("from " + "PointEntity" + " where id = :id");
            //byId.setParameter("id", point.getId());
            //List<PointEntity> ul = byId.list();

            if (!pointFound.getUserByOwner().getLogin().equals(login)) {
                throw new InvalidIdException();
            }

            else {
                session.delete(pointFound);
                session.getTransaction().commit();
            }
        }
        catch(NullPointerException e) {
        }
        finally {
            session.close();
        }

    }

    public UserEntity getUserByLogin(String uLogin) throws Exception {
        final Session session = getSession();
        try {
            final Query query = session.createQuery("from " + "UserEntity" + " where " + "login = :login");
            query.setParameter("login", uLogin);
            List<UserEntity> ls = query.list();

            return ls.get(0);
        } finally {
            session.close();
        }
    }


}
