package pikweb;

import com.fasterxml.jackson.annotation.JsonIgnore;

import javax.persistence.*;
import java.util.Collection;

/**
 * Persistence class generated by Hibernate. An user of our app.
 */
@Entity
@Table(name = "user", schema = "pik", catalog = "postgres")
public class UserEntity {
    private int id;
    private String login;
    private String passhash;
    @JsonIgnore
    private transient Collection<PointEntity> pointsById;

    /**
     * Get user primary key.
     * @return User primary key.
     */
    @Id
    @Column(name = "id", nullable = false)
    public int getId() {
        return id;
    }

    /**
     * Set user primary key.
     * @param id primary key to set.
     */
    public void setId(int id) {
        this.id = id;
    }

    /**
     * Get user name.
     * @return User name - login.
     */
    @Basic
    @Column(name = "login", nullable = false, length = -1)
    public String getLogin() {
        return login;
    }

    /**
     * Set new user name.
     * @param login Username to set.
     */
    public void setLogin(String login) {
        this.login = login;
    }

    /**
     * Get user paassword hash.
     * @return User password hash.
     */
    @Basic
    @Column(name = "passhash", nullable = false, length = -1)
    public String getPasshash() {
        return passhash;
    }

    /**
     * Set user password hash.
     * @param passhash Password hash to set.
     */
    public void setPasshash(String passhash) {
        this.passhash = passhash;
    }

    /**
     * Compare users by equality.
     * @param o User to compare.
     * @return True if all fields are equal, False otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        UserEntity that = (UserEntity) o;

        if (id != that.id) return false;
        if (login != null ? !login.equals(that.login) : that.login != null) return false;
        if (passhash != null ? !passhash.equals(that.passhash) : that.passhash != null) return false;

        return true;
    }

    /**
     * Generate hash code from the user.
     * @return Hash of the user.
     */
    @Override
    public int hashCode() {
        int result = id;
        result = 31 * result + (login != null ? login.hashCode() : 0);
        result = 31 * result + (passhash != null ? passhash.hashCode() : 0);
        return result;
    }

    /**
     * Get list of all points that this user is owner of.
     * @return list of all points that this user is owner of.
     */
    @OneToMany(mappedBy = "userByOwner")
    public Collection<PointEntity> getPointsById() {
        return pointsById;
    }

    /**
     * Set list of all points that this user is owner of.
     * @param pointsById New list of points to set.
     */
    public void setPointsById(Collection<PointEntity> pointsById) {
        this.pointsById = pointsById;
    }
}
